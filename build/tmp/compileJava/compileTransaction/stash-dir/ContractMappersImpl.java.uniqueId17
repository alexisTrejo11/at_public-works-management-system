package com.publicworks.public_works_management.contracts.application.mapper;

import com.publicworks.public_works_management.contracts.application.dto.response.ContractResponse;
import com.publicworks.public_works_management.contracts.application.service.CreateContractCommand;
import com.publicworks.public_works_management.contracts.domain.Contract;
import com.publicworks.public_works_management.contracts.domain.ContractClause;
import com.publicworks.public_works_management.contracts.domain.valueObjects.ContractId;
import com.publicworks.public_works_management.contracts.infrastructure.ports.output.persistence.ContractClauseModel;
import com.publicworks.public_works_management.contracts.infrastructure.ports.output.persistence.ContractModel;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-04-28T17:26:54-0600",
    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.13.jar, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class ContractMappersImpl implements ContractMappers {

    @Override
    public Contract createCommandToEntity(CreateContractCommand contractRequestDTO) {
        if ( contractRequestDTO == null ) {
            return null;
        }

        Contract.ContractBuilder contract = Contract.builder();

        contract.title( contractRequestDTO.title() );
        contract.description( contractRequestDTO.description() );
        contract.startDate( contractRequestDTO.startDate() );
        contract.endDate( contractRequestDTO.endDate() );
        contract.amount( contractRequestDTO.amount() );
        contract.clauses( contractClauseModelListToContractClauseList( contractRequestDTO.clauses() ) );

        return contract.build();
    }

    @Override
    public ContractModel domainToModel(Contract contract) {
        if ( contract == null ) {
            return null;
        }

        ContractModel contractModel = new ContractModel();

        String value = contractIdValue( contract );
        if ( value != null ) {
            contractModel.setId( Long.parseLong( value ) );
        }
        contractModel.setContractNumber( contract.getContractNumber() );
        contractModel.setStartDate( contract.getStartDate() );
        contractModel.setEndDate( contract.getEndDate() );
        if ( contract.getAmount() != null ) {
            contractModel.setAmount( contract.getAmount().doubleValue() );
        }
        contractModel.setStatus( contract.getStatus() );
        contractModel.setClauses( contractClauseListToContractClauseModelList( contract.getClauses() ) );

        return contractModel;
    }

    @Override
    public Contract modelToDomain(ContractModel contractModel) {
        if ( contractModel == null ) {
            return null;
        }

        Contract.ContractBuilder contract = Contract.builder();

        contract.id( longToContractId( contractModel.getId() ) );
        contract.contractNumber( contractModel.getContractNumber() );
        contract.startDate( contractModel.getStartDate() );
        contract.endDate( contractModel.getEndDate() );
        if ( contractModel.getAmount() != null ) {
            contract.amount( BigDecimal.valueOf( contractModel.getAmount() ) );
        }
        contract.status( contractModel.getStatus() );
        contract.clauses( contractClauseModelListToContractClauseList( contractModel.getClauses() ) );

        return contract.build();
    }

    @Override
    public ContractResponse domainToResponseDTO(Contract contract) {
        if ( contract == null ) {
            return null;
        }

        ContractResponse contractResponse = new ContractResponse();

        contractResponse.setId( contractIdValue( contract ) );
        contractResponse.setContractNumber( contract.getContractNumber() );
        contractResponse.setTitle( contract.getTitle() );
        contractResponse.setDescription( contract.getDescription() );
        contractResponse.setStartDate( contract.getStartDate() );
        contractResponse.setEndDate( contract.getEndDate() );
        contractResponse.setAmount( contract.getAmount() );

        return contractResponse;
    }

    protected ContractClause contractClauseModelToContractClause(ContractClauseModel contractClauseModel) {
        if ( contractClauseModel == null ) {
            return null;
        }

        ContractClause.ContractClauseBuilder contractClause = ContractClause.builder();

        contractClause.clauseNumber( contractClauseModel.getClauseNumber() );
        contractClause.title( contractClauseModel.getTitle() );
        contractClause.content( contractClauseModel.getContent() );
        contractClause.mandatory( contractClauseModel.isMandatory() );

        return contractClause.build();
    }

    protected List<ContractClause> contractClauseModelListToContractClauseList(List<ContractClauseModel> list) {
        if ( list == null ) {
            return null;
        }

        List<ContractClause> list1 = new ArrayList<ContractClause>( list.size() );
        for ( ContractClauseModel contractClauseModel : list ) {
            list1.add( contractClauseModelToContractClause( contractClauseModel ) );
        }

        return list1;
    }

    private String contractIdValue(Contract contract) {
        if ( contract == null ) {
            return null;
        }
        ContractId id = contract.getId();
        if ( id == null ) {
            return null;
        }
        String value = id.value();
        if ( value == null ) {
            return null;
        }
        return value;
    }

    protected ContractClauseModel contractClauseToContractClauseModel(ContractClause contractClause) {
        if ( contractClause == null ) {
            return null;
        }

        ContractClauseModel contractClauseModel = new ContractClauseModel();

        contractClauseModel.setClauseNumber( contractClause.getClauseNumber() );
        contractClauseModel.setTitle( contractClause.getTitle() );
        contractClauseModel.setContent( contractClause.getContent() );
        contractClauseModel.setMandatory( contractClause.isMandatory() );

        return contractClauseModel;
    }

    protected List<ContractClauseModel> contractClauseListToContractClauseModelList(List<ContractClause> list) {
        if ( list == null ) {
            return null;
        }

        List<ContractClauseModel> list1 = new ArrayList<ContractClauseModel>( list.size() );
        for ( ContractClause contractClause : list ) {
            list1.add( contractClauseToContractClauseModel( contractClause ) );
        }

        return list1;
    }
}
