package com.publicworks.public_works_management.contracts.application.mapper;

import com.publicworks.public_works_management.contracts.domain.ContractClause;
import com.publicworks.public_works_management.contracts.infrastructure.ports.output.persistence.ContractClauseModel;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2025-04-28T17:26:54-0600",
    comments = "version: 1.5.5.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.13.jar, environment: Java 21.0.7 (Eclipse Adoptium)"
)
@Component
public class ContractClauseMappersImpl implements ContractClauseMappers {

    @Override
    public ContractClause modelToDomain(ContractClauseModel model) {
        if ( model == null ) {
            return null;
        }

        ContractClause.ContractClauseBuilder contractClause = ContractClause.builder();

        contractClause.clauseNumber( model.getClauseNumber() );
        contractClause.title( model.getTitle() );
        contractClause.content( model.getContent() );
        contractClause.mandatory( model.isMandatory() );

        return contractClause.build();
    }

    @Override
    public ContractClauseModel domainToModel(ContractClause domain) {
        if ( domain == null ) {
            return null;
        }

        ContractClauseModel contractClauseModel = new ContractClauseModel();

        contractClauseModel.setClauseNumber( domain.getClauseNumber() );
        contractClauseModel.setTitle( domain.getTitle() );
        contractClauseModel.setContent( domain.getContent() );
        contractClauseModel.setMandatory( domain.isMandatory() );

        return contractClauseModel;
    }

    @Override
    public void updateModelFromDomain(ContractClause domain, ContractClauseModel model) {
        if ( domain == null ) {
            return;
        }

        model.setClauseNumber( domain.getClauseNumber() );
        model.setTitle( domain.getTitle() );
        model.setContent( domain.getContent() );
        model.setMandatory( domain.isMandatory() );
    }
}
